{"version":3,"sources":["assets/imgs/logo.png","modules/chartModules/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Index","props","Graph","undefined","gData","nodes","Array","keys","map","i","id","links","filter","source","target","Math","round","random","width","document","getElementById","offsetWidth","height","offsetHeight","console","log","this","ForceGraph3D","graphData","style","Component","App","className","class","href","data-ribbon","title","maxWidth","src","require","alt","srcset","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,6JCqC5BC,EAlCf,YACE,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,WAAQC,EAFG,EADpB,iFAMI,IACMC,EAAQ,CACZC,MAAO,YAAIC,MAFH,KAEYC,QAAQC,KAAI,SAAAC,GAAC,MAAK,CAAEC,GAAID,MAC5CE,MAAO,YAAIL,MAHH,KAGYC,QACjBK,QAAO,SAAAF,GAAE,OAAIA,KACbF,KAAI,SAAAE,GAAE,MAAK,CACVG,OAAQH,EACRI,OAAQC,KAAKC,MAAMD,KAAKE,UAAYP,EAAK,SAG3CQ,EAAQC,SAASC,eAAe,YAAYC,YAC5CC,EAASH,SAASC,eAAe,YAAYG,aACjDC,QAAQC,IAAIP,EAAMI,GAClBI,KAAKxB,MAAQyB,cACVR,SAASC,eAAe,aACtBF,MAAMA,GACNI,OAAOA,GACPM,UAAUxB,KAvBnB,+BA0BI,OACE,yBAAKyB,MAAO,CAACX,MAAMQ,KAAKzB,MAAMiB,MAAMI,OAAOI,KAAKzB,MAAMqB,SAClD,yBAAKZ,GAAG,WAAWmB,MAAO,CAACX,MAAM,OAAOI,OAAO,eA5BzD,GAA2BQ,aC6BZC,G,MA7Bf,YACE,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,WAAQC,EAFI,EADrB,sEAMI,OACE,6BACE,yBAAK6B,UAAU,aACb,yBAAKA,UAAU,qBACb,uBAAGC,MAAM,qBAAqBC,KAAK,oDAAoDC,cAAY,oBAAoBC,MAAM,qBAA7H,sBAEF,6BACA,yBAAKJ,UAAU,cAAcH,MAAO,CAACX,MAAM,SACzC,yBACEW,MAAO,CAAEQ,SAAU,QAASnB,MAAO,QACnCoB,IAAKC,EAAQ,IACbC,IAAI,yDACJC,OAAO,KACT,6BACA,+BAGJ,kBAAC,EAAD,CAAWvB,MAAM,OAAOI,OAAO,eAvBvC,GAAyBQ,cCSLY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,SD4H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.4767cdee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d399e835.png\";","import ForceGraph3D from '3d-force-graph';\r\nimport React, { Component } from 'react'\r\n\r\nexport class Index extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.Graph = undefined\r\n  }\r\n  componentDidMount() {\r\n    const N = 300;\r\n    const gData = {\r\n      nodes: [...Array(N).keys()].map(i => ({ id: i })),\r\n      links: [...Array(N).keys()]\r\n        .filter(id => id)\r\n        .map(id => ({\r\n          source: id,\r\n          target: Math.round(Math.random() * (id - 1))\r\n        }))\r\n    };\r\n    var width = document.getElementById('3d-graph').offsetWidth\r\n    var height = document.getElementById('3d-graph').offsetHeight\r\n    console.log(width,height)\r\n    this.Graph = ForceGraph3D()\r\n      (document.getElementById('3d-graph'))\r\n        .width(width)\r\n        .height(height)\r\n        .graphData(gData);\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{width:this.props.width,height:this.props.height}}>\r\n          <div id=\"3d-graph\" style={{width:'100%',height:'100%'}}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index\r\n","import React, { Component } from 'react'\nimport ChartView from './modules/chartModules'\nimport './App.css'\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.Graph = undefined\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"d-none d-sm-block\">\n            <a class=\"github-fork-ribbon\" href=\"https://github.com/p208p2002/novel-relation-chart\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\n          </div>\n          <br />\n          <div className=\"text-center\" style={{width:'100%'}}>\n            <img\n              style={{ maxWidth: '550px', width: '100%' }}\n              src={require(\"./assets/imgs/logo.png\")}\n              alt=\"絕代雙驕人物關係圖\"\n              srcset=\"\" />\n            <br />\n            <br />\n          </div>\n        </div>\n        <ChartView width=\"100%\" height=\"500px\" />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}