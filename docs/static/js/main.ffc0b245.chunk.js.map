{"version":3,"sources":["assets/imgs/logo.png","assets/imgs/fullscreen.svg","modules/chartModules/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","THREE","require","Index","props","Graph","undefined","this","fullMode","width","document","getElementById","offsetWidth","height","offsetHeight","elem","ForceGraph3D","graphData","chartData","linkOpacity","linkWidth","link","value","linkThreeObjectExtend","linkThreeObject","sprite","SpriteText","source","target","color","textHeight","linkPositionUpdate","start","end","middlePos","Object","assign","map","c","position","nodeLabel","nodeAutoColorBy","onNodeHover","node","style","cursor","onNodeClick","distRatio","Math","hypot","x","y","z","cameraPosition","nodeThreeObject","obj","Mesh","SphereGeometry","MeshBasicMaterial","depthWrite","transparent","opacity","id","add","d3Force","strength","Component","parse","App","state","isMobile","window","addEventListener","setTimeout","location","reload","setState","a","check","navigator","userAgent","vendor","opera","test","substr","mobileHeight","parseInt","screen","toString","ChartViewHeight","parsed","href","console","log","query","overflow","display","className","data-ribbon","title","maxWidth","src","alt","srcSet","marginTop","backgroundColor","onClick","open","marginLeft","bottom","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ffc0b245.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d399e835.png\";","module.exports = __webpack_public_path__ + \"static/media/fullscreen.f90ef5b1.svg\";","import ForceGraph3D from '3d-force-graph';\r\nimport React, { Component } from 'react'\r\nimport SpriteText from 'three-spritetext';\r\nimport chartData from '../../assets/chart_data.json'\r\nvar THREE = require('three');\r\n\r\nexport class Index extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.Graph = undefined\r\n  }\r\n  componentDidMount() {\r\n    // console.log(chartData)\r\n    // const N = 300;\r\n    // const gData = {\r\n    //   nodes: [...Array(N).keys()].map(i => ({ id: i })),\r\n    //   links: [...Array(N).keys()]\r\n    //     .filter(id => id)\r\n    //     .map(id => ({\r\n    //       source: id,\r\n    //       target: Math.round(Math.random() * (id - 1))\r\n    //     }))\r\n    // };\r\n    // var width = document.getElementById('3d-graph').offsetWidth\r\n    // var height = document.getElementById('3d-graph').offsetHeight\r\n    // console.log(width,height)\r\n    // this.Graph = ForceGraph3D()\r\n    //   (document.getElementById('3d-graph'))\r\n    //     .width(width)\r\n    //     .height(height)\r\n    //     .graphData(gData)\r\n    //     .nodeRelSize(12);\r\n    let { fullMode = false } = this.props\r\n    var width = document.getElementById('3d-graph').offsetWidth\r\n    var height = document.getElementById('3d-graph').offsetHeight\r\n    const elem = document.getElementById('3d-graph');\r\n    const Graph = ForceGraph3D()\r\n      (elem)\r\n        .graphData(chartData)\r\n        .height(fullMode?undefined:height)\r\n        .width(fullMode?undefined:width)\r\n        .linkOpacity(0.18)\r\n        .linkWidth((link)=>{\r\n          // console.log(link)\r\n          // return 1\r\n          return 1+link.value/12\r\n        })\r\n        .linkThreeObjectExtend(true)\r\n        .linkThreeObject(link => {\r\n          // extend link with text sprite\r\n          const sprite = new SpriteText(`${link.source} > ${link.target} (${link.value})`);\r\n          sprite.color = 'lightgrey';\r\n          sprite.textHeight = 3;\r\n          return sprite;\r\n        })\r\n        .linkPositionUpdate((sprite, { start, end }) => {\r\n          const middlePos = Object.assign(...['x', 'y', 'z'].map(c => ({\r\n            [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\r\n          })));\r\n\r\n          // Position sprite\r\n          Object.assign(sprite.position, middlePos);\r\n        })\r\n        .nodeLabel('id')\r\n        .nodeAutoColorBy('id')\r\n        .onNodeHover(node => elem.style.cursor = node ? 'pointer' : null)\r\n        .onNodeClick(node => {\r\n          // Aim at node from outside it\r\n          const distance = 250;\r\n          const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\r\n\r\n          Graph.cameraPosition(\r\n            { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n            node, // lookAt ({ x, y, z })\r\n            3000  // ms transition duration\r\n          );\r\n        })\r\n        .nodeThreeObject(node => {\r\n          // use a sphere as a drag handle\r\n          const obj = new THREE.Mesh(\r\n            new THREE.SphereGeometry(10),\r\n            new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 })\r\n          );\r\n\r\n          // add text sprite as child\r\n          const sprite = new SpriteText(node.id);\r\n          sprite.color = node.color;\r\n          sprite.textHeight = 25;\r\n          obj.add(sprite);\r\n\r\n          return obj;\r\n        });\r\n\r\n\r\n        // .linkOpacity(0.18)\r\n        // .linkWidth((link)=>{\r\n        //   // console.log(link)\r\n        //   // return 1\r\n        //   return 1+link.value/15\r\n        // })\r\n        // .linkThreeObjectExtend(true)\r\n        // .linkThreeObject(link => {\r\n        //   // extend link with text sprite\r\n        //   const sprite = new SpriteText(`${link.source} > ${link.target} (${link.value})`);\r\n        //   sprite.color = 'lightgrey';\r\n        //   sprite.fontSize = 50\r\n        //   sprite.textHeight = 3;\r\n        //   return sprite;\r\n        // })\r\n        // .linkPositionUpdate((sprite, { start, end }) => {\r\n        //   const middlePos = Object.assign(...['x', 'y', 'z'].map(c => ({\r\n        //     [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\r\n        //   })));\r\n\r\n        //   // Position sprite\r\n        //   Object.assign(sprite.position, middlePos);\r\n        // })\r\n        // .nodeAutoColorBy('id')\r\n        // .onNodeHover(node => elem.style.cursor = node ? 'pointer' : null)\r\n        // .onNodeClick(node => {\r\n        //   console.log('click')\r\n        //   // Aim at node from outside it\r\n        //   const distance = 40;\r\n        //   const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\r\n\r\n        //   Graph.cameraPosition(\r\n        //     { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n        //     node, // lookAt ({ x, y, z })\r\n        //     3000  // ms transition duration\r\n        //   );\r\n        // })\r\n        // .nodeThreeObject(node => {\r\n        //   // use a sphere as a drag handle\r\n        //   const obj = new THREE.Mesh(\r\n        //     new THREE.SphereGeometry(10),\r\n        //     new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 })\r\n        //   );\r\n\r\n        //   // add text sprite as child\r\n        //   const sprite = new SpriteText(node.id);\r\n        //   sprite.color = node.color;\r\n        //   sprite.textHeight = 25;\r\n        //   obj.add(sprite);\r\n\r\n        //   return obj;\r\n        // });\r\n\r\n    // Spread nodes a little wider\r\n    Graph.d3Force('charge').strength(-3000);\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{width:this.props.width,height:this.props.height}}>\r\n          <div id=\"3d-graph\" style={{width:'100%',height:'100%'}}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index\r\n","import React, { Component } from 'react'\r\nimport ChartView from './modules/chartModules'\r\nimport './App.css'\r\nvar parse = require('url-parse')\r\nexport class App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.Graph = undefined\r\n    this.state = {\r\n      isMobile: undefined\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', () => {\r\n      setTimeout(() => {\r\n        window.location.reload()\r\n      }, 200)\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    let isMobile = function () {\r\n      var check = false;\r\n      // eslint-disable-next-line \r\n      (function (a) { if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);\r\n      return check;\r\n    };\r\n    this.setState({\r\n      isMobile: isMobile()\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let { isMobile } = this.state\r\n    let mobileHeight = parseInt(window.screen.height * 0.65).toString() + \"px\"\r\n    let deskTopHeight = \"550px\"\r\n    let ChartViewHeight = isMobile ? mobileHeight : deskTopHeight\r\n\r\n    var parsed = parse(window.location.href);\r\n    console.log(window.location.href)\r\n    console.log(parsed.query)\r\n    let query = parsed.query.toString()\r\n    let fullMode = query === '?mode=full' ? true : false\r\n\r\n    return (\r\n      <div>\r\n        {!fullMode ? (\r\n          <div>\r\n            <div className=\"container\">\r\n              <div className=\"d-none d-sm-block\">\r\n                <a className=\"github-fork-ribbon\" href=\"https://github.com/p208p2002/novel-relation-chart\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\r\n              </div>\r\n              <br />\r\n              <div className=\"text-center\" style={{ width: '100%' }}>\r\n                <img\r\n                  style={{ maxWidth: '550px', width: '100%' }}\r\n                  src={require(\"./assets/imgs/logo.png\")}\r\n                  alt=\"絕代雙驕人物關係圖\"\r\n                  srcSet=\"\" />\r\n                <br />\r\n                <br />\r\n              </div>\r\n            </div>\r\n            <ChartView width=\"100%\" height={ChartViewHeight} />\r\n            <div className=\"text-center\">\r\n            <button\r\n              className=\"btn\"\r\n              style={{\r\n                marginTop:'5px',\r\n                backgroundColor:'rgba(255,255,255,0.6)'\r\n              }}\r\n              onClick={() => {\r\n                window.open(window.location.href + '?mode=full')\r\n              }}\r\n            >全螢幕\r\n            <img style={{ marginTop: '-4px', marginLeft: '3px' }} src={require('./assets/imgs/fullscreen.svg')} alt=\"\"/>\r\n            </button>\r\n            </div>\r\n            <footer className=\"text-center\" style={{\r\n              width: '100%',\r\n              position: 'absolute',\r\n              bottom: 0,\r\n              color: 'rgba(0,0,0,0.7)',\r\n              backgroundColor: 'rgba(255,255,255,0.35)'\r\n            }}>\r\n              2020 社群網路與運算\r\n        </footer>\r\n          </div>\r\n        ) : (\r\n            <div style={{ overflow: 'hidden', display: 'block' }}>\r\n              <ChartView width=\"100%\" height=\"100%\" fullMode={fullMode}/>\r\n            </div>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './assets/css/bootstrap.min.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}