{"version":3,"sources":["assets/imgs/logo.png","modules/chartModules/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","THREE","require","Index","props","Graph","undefined","width","document","getElementById","offsetWidth","height","offsetHeight","ForceGraph3D","graphData","chartData","linkWidth","link","console","log","value","nodeAutoColorBy","nodeThreeObject","node","obj","Mesh","SphereGeometry","MeshBasicMaterial","depthWrite","transparent","opacity","sprite","SpriteText","id","color","textHeight","add","d3Force","strength","style","this","Component","App","state","isMobile","window","addEventListener","setTimeout","location","reload","setState","a","check","navigator","userAgent","vendor","opera","test","substr","ChartViewHeight","parseInt","screen","toString","className","href","data-ribbon","title","maxWidth","src","alt","srcSet","position","bottom","backgroundColor","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+/eAAAA,EAAOC,QAAU,IAA0B,kC,qKCIvCC,EAAQC,EAAQ,GAqELC,EAnEf,YACE,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,WAAQC,EAFG,EADpB,iFA2BI,IAAIC,EAAQC,SAASC,eAAe,YAAYC,YAC5CC,EAASH,SAASC,eAAe,YAAYG,aACnCC,cACXL,SAASC,eAAe,aACtBF,MAAMA,GACNI,OAAOA,GACPG,UAAUC,GACVC,WAAU,SAACC,GAEV,OADAC,QAAQC,IAAIF,GACLA,EAAKG,SAEbC,gBAAgB,SAChBC,iBAAgB,SAAAC,GAEf,IAAMC,EAAM,IAAIvB,EAAMwB,KACpB,IAAIxB,EAAMyB,eAAe,IACzB,IAAIzB,EAAM0B,kBAAkB,CAAEC,YAAY,EAAOC,aAAa,EAAMC,QAAS,KAIzEC,EAAS,IAAIC,IAAWT,EAAKU,IAKnC,OAJAF,EAAOG,MAAQX,EAAKW,MACpBH,EAAOI,WAAa,EACpBX,EAAIY,IAAIL,GAEDP,KAIPa,QAAQ,UAAUC,UAAU,OAxDtC,+BA2DI,OACE,yBAAKC,MAAO,CAAChC,MAAMiC,KAAKpC,MAAMG,MAAMI,OAAO6B,KAAKpC,MAAMO,SAClD,yBAAKsB,GAAG,WAAWM,MAAO,CAAChC,MAAM,OAAOI,OAAO,eA7DzD,GAA2B8B,aC8DZC,G,MAjEf,YACE,WAAYtC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,WAAQC,EACb,EAAKqC,MAAM,CACTC,cAAStC,GAJM,EADrB,iFAUIuC,OAAOC,iBAAiB,UAAS,WAC/BC,YAAW,WACTF,OAAOG,SAASC,WAChB,UAbR,2CAwBIT,KAAKU,SAAS,CACZN,SAPa,WACb,IAEUO,EAFNC,GAAQ,EAGZ,OADUD,EAAy7DE,UAAUC,WAAWD,UAAUE,QAAQV,OAAOW,OAAj+D,2TAA2TC,KAAKN,IAAI,0kDAA0kDM,KAAKN,EAAEO,OAAO,EAAE,OAAKN,GAAQ,GACp7DA,EAGER,OAzBf,+BA6BY,IAEJe,EADcnB,KAAKG,MAAlBC,SAC0BgB,SAA8B,IAArBf,OAAOgB,OAAOlD,QAAamD,WAAW,KAAK,QAEnF,OACE,6BACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,qBAAqBC,KAAK,oDAAoDC,cAAY,oBAAoBC,MAAM,qBAAjI,sBAEF,6BACA,yBAAKH,UAAU,cAAcxB,MAAO,CAAChC,MAAM,SACzC,yBACEgC,MAAO,CAAE4B,SAAU,QAAS5D,MAAO,QACnC6D,IAAKlE,EAAQ,IACbmE,IAAI,yDACJC,OAAO,KACT,6BACA,+BAGJ,kBAAC,EAAD,CAAW/D,MAAM,OAAOI,OAAQgD,IAChC,4BAAQI,UAAU,cAAcxB,MAAO,CACrChC,MAAM,OACNgE,SAAS,WACTC,OAAO,EACPtC,MAAM,kBACNuC,gBAAgB,2BALlB,wDAnDR,GAAyBhC,cCSLiC,QACW,cAA7B7B,OAAOG,SAAS2B,UAEe,UAA7B9B,OAAOG,SAAS2B,UAEhB9B,OAAOG,SAAS2B,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAStE,SAASC,eAAe,SD4H3C,kBAAmB4C,WACrBA,UAAU0B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.311ccecb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d399e835.png\";","import ForceGraph3D from '3d-force-graph';\r\nimport React, { Component } from 'react'\r\nimport SpriteText from 'three-spritetext';\r\nimport chartData from '../../assets/chart_data.json'\r\nvar THREE = require('three');\r\n\r\nexport class Index extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.Graph = undefined\r\n  }\r\n  componentDidMount() {\r\n    // console.log(chartData)\r\n    // const N = 300;\r\n    // const gData = {\r\n    //   nodes: [...Array(N).keys()].map(i => ({ id: i })),\r\n    //   links: [...Array(N).keys()]\r\n    //     .filter(id => id)\r\n    //     .map(id => ({\r\n    //       source: id,\r\n    //       target: Math.round(Math.random() * (id - 1))\r\n    //     }))\r\n    // };\r\n    // var width = document.getElementById('3d-graph').offsetWidth\r\n    // var height = document.getElementById('3d-graph').offsetHeight\r\n    // console.log(width,height)\r\n    // this.Graph = ForceGraph3D()\r\n    //   (document.getElementById('3d-graph'))\r\n    //     .width(width)\r\n    //     .height(height)\r\n    //     .graphData(gData)\r\n    //     .nodeRelSize(12);\r\n\r\n    var width = document.getElementById('3d-graph').offsetWidth\r\n    var height = document.getElementById('3d-graph').offsetHeight\r\n    const Graph = ForceGraph3D()\r\n      (document.getElementById('3d-graph'))\r\n        .width(width)\r\n        .height(height)\r\n        .graphData(chartData)\r\n        .linkWidth((link)=>{\r\n          console.log(link)\r\n          return link.value\r\n        })\r\n        .nodeAutoColorBy('group')\r\n        .nodeThreeObject(node => {\r\n          // use a sphere as a drag handle\r\n          const obj = new THREE.Mesh(\r\n            new THREE.SphereGeometry(10),\r\n            new THREE.MeshBasicMaterial({ depthWrite: false, transparent: true, opacity: 0 })\r\n          );\r\n\r\n          // add text sprite as child\r\n          const sprite = new SpriteText(node.id);\r\n          sprite.color = node.color;\r\n          sprite.textHeight = 8;\r\n          obj.add(sprite);\r\n\r\n          return obj;\r\n        });\r\n\r\n    // Spread nodes a little wider\r\n    Graph.d3Force('charge').strength(-300);\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{width:this.props.width,height:this.props.height}}>\r\n          <div id=\"3d-graph\" style={{width:'100%',height:'100%'}}></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Index\r\n","import React, { Component } from 'react'\nimport ChartView from './modules/chartModules'\nimport './App.css'\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.Graph = undefined\n    this.state={\n      isMobile:undefined\n    }\n  }\n\n  componentDidMount(){\n    window.addEventListener('resize',()=>{\n      setTimeout(()=>{\n        window.location.reload()\n      },200)\n    });\n  }\n\n  componentWillMount(){\n    let isMobile = function() {\n      var check = false;\n      // eslint-disable-next-line \n      (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n      return check;\n    };\n    this.setState({\n      isMobile:isMobile()\n    })\n  }\n\n  render() {\n    let{ isMobile } = this.state\n    let ChartViewHeight = isMobile?parseInt(window.screen.height*0.65).toString()+\"px\":'550px'\n\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"d-none d-sm-block\">\n            <a className=\"github-fork-ribbon\" href=\"https://github.com/p208p2002/novel-relation-chart\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\n          </div>\n          <br />\n          <div className=\"text-center\" style={{width:'100%'}}>\n            <img\n              style={{ maxWidth: '550px', width: '100%' }}\n              src={require(\"./assets/imgs/logo.png\")}\n              alt=\"絕代雙驕人物關係圖\"\n              srcSet=\"\" />\n            <br />\n            <br />\n          </div>\n        </div>\n        <ChartView width=\"100%\" height={ChartViewHeight} />\n        <footer className=\"text-center\" style={{\n          width:'100%',\n          position:'absolute',\n          bottom:0,\n          color:'rgba(0,0,0,0.7)',\n          backgroundColor:'rgba(255,255,255,0.35)'\n        }}>\n          2020 社群網路與運算\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}